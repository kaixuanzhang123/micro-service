spring:
  application:
     name: fukun-core-gateway-server
  cloud:
     consul:
        host: localhost
        port: 8500
        discovery:
          enabled: true
          register: true
          tags: gateway-service
          serviceName: ${spring.application.name}
          hostname: ${spring.application.name}
          port: ${server.port}
          instanceId: ${spring.application.name}:${server.port}
          preferIpAddress: true
          healthCheckInterval: 10s
          healthCheckUrl: http://${spring.cloud.client.ip-address}:${server.port}/health
          heartbeat:
             enabled: true
     gateway:
       # 是否与服务注册和服务发现组件进行结合，通过 serviceId 转发到具体的服务实例。默认为 false，设为 true 便开启通过服务中心的自动根据 serviceId 创建路由的功能。
       discovery:
         locator:
           enabled: true
       routes:
             # 自定义的路由 ID，保持唯一
             - id: method_route
               # 目标服务地址，针对单个服务
               #uri: http://localhost:8501
               #格式为：lb://应用注册服务名，针对多个服务，主要是服务中心中的服务，比如consul中的服务实例
               uri: lb://consul-service-producer
               filters:
               #转发请求之前，所有的 GET 方法都会自动添加foo=bar的请求参数
               #- AddRequestParameter=foo, bar
               #当请求/tang/yi/fei/hello后端匹配到的请求路径就会变成http://IP:PORT/hello。
               #- StripPrefix=3
               # 输入过滤器类的名称前缀，必须匹配自定义的AuthGatewayFilterFactory这个类的前缀
               #- Auth
               #filter 名称必须是 RequestRateLimiter
               - name: RequestRateLimiter
                 args:
                    #redis-rate-limiter.replenishRate：允许用户每秒处理多少个请求，令牌桶放入的速度
                    redis-rate-limiter.replenishRate: 1
                    #令牌桶的容量，允许在一秒钟内完成的最大请求数，令牌桶的容积
                    redis-rate-limiter.burstCapacity: 3
                    #使用 SpEL 按名称引用 bean
                    key-resolver: "#{@ipKeyResolver}"
               #gateway 将使用 myCommandName 作为名称生成 HystrixCommand 对象来进行熔断管理
               #- Hystrix=myCommandName
               #fallbackUri: forward:/fallback配置了 fallback 时要会调的路径，当Hystrix 的 fallback 被调用时，请求将转发到/fallback URI。
               - name: Hystrix
                 args:
                    name: fallbackcmd
                    fallbackUri: forward:/fallback
               #Retry GatewayFilter 通过这四个参数来控制重试机制： retries, statuses, methods, 和 series。
               - name: Retry
                 args:
                    #retries：重试次数，默认值是 3 次
                    retries: 3
                    #HTTP 的状态返回码，取值请参考：org.springframework.http.HttpStatus
                    statuses:
                     - BAD_GATEWAY
                    #指定哪些方法的请求需要进行重试逻辑，默认值是 GET 方法，取值参考：org.springframework.http.HttpMethod
                    methods:
                     - GET
                     - POST
                    # 一些列的状态码配置，取值参考：org.springframework.http.HttpStatus.Series。符合的某段状态码才会进行重试逻辑，默认值是 SERVER_ERROR，值是 5，也就是 5XX(5 开头的状态码)，共有5 个值。
                    series:
                     - SERVER_ERROR
               # 路由条件，Predicate 接受一个输入参数，返回一个布尔值结果。该接口包含多种默认方法来将 Predicate 组合成其他复杂的逻辑（比如：与，或，非）。
               # predicate定义了一组匹配规则
               predicates:
               # 当访问地址 http://localhost:9999/foo时会自动转发到地址：http://localhost:8501/foo
               - Path=/**
               #- Method=GET
  redis:
    # redis的数据库索引，默认为0
    database: 0
    host: 192.168.0.49
    port: 6379
    password: '##!zggc5055'
#    jedis:
#       pool:
#         # 连接池最大连接数，如果为负数表示没有限制
#         max-active: 8
#         # 连接池中最大空闲连接数
#         max-idle: 5
#         # 连接池中最小空闲连接数
#         min-idle: 0
#         # 当池内没有可用的连接时，最大等待时间
#         max-wait: 3000
#    timeout: 10000
server:
 port: 9999

# 调整相关gateway 包的 log 级别，以便排查问题
logging:
   level:
     org.springframework.cloud.gateway: debug

# hystrix 信号量隔离，3秒后自动超时
hystrix:
  command:
    default:
      execution:
        isolation:
          strategy: SEMAPHORE
          thread:
            timeoutInMilliseconds: 3000


