<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.fukun.rabbitmq.mapper.BrokerMessageLogMapper">

    <resultMap id="BrokerMessageLogResultMap" type="com.fukun.rabbitmq.model.BrokerMessageLog">
        <id property="messageId" column="message_id"/>
        <result property="message" column="message"/>
        <result property="tryCount" column="try_count"/>
        <result property="status" column="status"/>
        <result property="nextRetry" column="next_retry"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <select id="query4StatusAndTimeoutMessage" resultMap="BrokerMessageLogResultMap">
          SELECT message_id, message, try_count, status, next_retry, create_time, update_time
            FROM broker_message_log bml
            WHERE status = '0' AND next_retry &lt;= sysdate()
    </select>

    <update id="update4ReSend">
    update broker_message_log bml
    set bml.try_count = bml.try_count + 1,
      bml.update_time = #{updateTime, jdbcType=TIMESTAMP}
    where bml.message_id = #{messageId,jdbcType=VARCHAR}
  </update>

    <update id="changeBrokerMessageLogStatus">
    update broker_message_log bml
    set bml.status = #{status,jdbcType=VARCHAR},
          bml.update_time = #{updateTime, jdbcType=TIMESTAMP}
    where bml.message_id = #{messageId,jdbcType=VARCHAR}
  </update>

    <insert id="insert" parameterType="com.fukun.rabbitmq.model.BrokerMessageLog">
        INSERT INTO
        broker_message_log
        (
        message_id,
        message,
        status,
        next_retry,
        create_time,
        update_time
        )
        VALUES
        (
        #{messageId},
        #{message},
        #{status},
        #{nextRetry},
        #{createTime},
        #{updateTime}
        )
    </insert>
</mapper>